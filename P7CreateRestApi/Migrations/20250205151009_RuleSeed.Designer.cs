// <auto-generated />
using System;
using Dot.Net.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace P7CreateRestApi.Migrations
{
    [DbContext(typeof(LocalDbContext))]
    [Migration("20250205151009_RuleSeed")]
    partial class RuleSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Dot.Net.WebApi.Controllers.Domain.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FitchRating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoodysRating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("OrderNumber")
                        .HasColumnType("tinyint");

                    b.Property<string>("SandPRating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FitchRating = "AAA",
                            MoodysRating = "Aaa",
                            OrderNumber = (byte)1,
                            SandPRating = "AAA"
                        },
                        new
                        {
                            Id = 2,
                            FitchRating = "BBB",
                            MoodysRating = "Baa1",
                            OrderNumber = (byte)2,
                            SandPRating = "BBB"
                        });
                });

            modelBuilder.Entity("Dot.Net.WebApi.Controllers.Rule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SqlPart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SqlStr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description de la règle A",
                            Json = "{\"key\":\"valueA\"}",
                            Name = "Règle de Validation A",
                            SqlPart = "WHERE conditionA",
                            SqlStr = "SELECT * FROM TableA",
                            Template = "Template A"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description de la règle B",
                            Json = "{\"key\":\"valueB\"}",
                            Name = "Règle de Validation B",
                            SqlPart = "WHERE conditionB",
                            SqlStr = "SELECT * FROM TableB",
                            Template = "Template B"
                        });
                });

            modelBuilder.Entity("Dot.Net.WebApi.Domain.Bid", b =>
                {
                    b.Property<int>("BidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BidId"), 1L, 1);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("AskPrice")
                        .HasColumnType("float");

                    b.Property<double?>("AskQuantity")
                        .HasColumnType("float");

                    b.Property<string>("Benchmark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BidDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("BidPrice")
                        .HasColumnType("float");

                    b.Property<double?>("BidQuantity")
                        .HasColumnType("float");

                    b.Property<string>("BidSecurity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BidStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BidType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Book")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Commentary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DealName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DealType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RevisionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevisionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Side")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceListId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trader")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BidId");

                    b.ToTable("Bids");

                    b.HasData(
                        new
                        {
                            BidId = 1,
                            Account = "Account1",
                            AskPrice = 1520.25,
                            AskQuantity = 200.0,
                            Benchmark = "Benchmark1",
                            BidDate = new DateTime(2025, 1, 31, 15, 10, 9, 664, DateTimeKind.Utc).AddTicks(509),
                            BidPrice = 1500.75,
                            BidQuantity = 100.5,
                            BidSecurity = "Security1",
                            BidStatus = "Pending",
                            BidType = "Type1",
                            Book = "Book1",
                            Commentary = "Test Commentary 1",
                            CreationDate = new DateTime(2025, 2, 5, 15, 10, 9, 664, DateTimeKind.Utc).AddTicks(513),
                            CreationName = "System",
                            DealName = "Deal1",
                            DealType = "TypeA",
                            RevisionDate = new DateTime(2025, 2, 5, 15, 10, 9, 664, DateTimeKind.Utc).AddTicks(514),
                            RevisionName = "System",
                            Side = "Buy",
                            SourceListId = "Source1",
                            Trader = "Trader1"
                        },
                        new
                        {
                            BidId = 2,
                            Account = "Account2",
                            AskPrice = 1650.5,
                            AskQuantity = 350.0,
                            Benchmark = "Benchmark2",
                            BidDate = new DateTime(2025, 2, 2, 15, 10, 9, 664, DateTimeKind.Utc).AddTicks(517),
                            BidPrice = 1600.0,
                            BidQuantity = 300.0,
                            BidSecurity = "Security2",
                            BidStatus = "Completed",
                            BidType = "Type2",
                            Book = "Book2",
                            Commentary = "Test Commentary 2",
                            CreationDate = new DateTime(2025, 2, 5, 15, 10, 9, 664, DateTimeKind.Utc).AddTicks(517),
                            CreationName = "Admin",
                            DealName = "Deal2",
                            DealType = "TypeB",
                            RevisionDate = new DateTime(2025, 2, 5, 15, 10, 9, 664, DateTimeKind.Utc).AddTicks(518),
                            RevisionName = "Admin",
                            Side = "Sell",
                            SourceListId = "Source2",
                            Trader = "Trader2"
                        });
                });

            modelBuilder.Entity("Dot.Net.WebApi.Domain.CurvePoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("AsOfDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<byte?>("CurveId")
                        .HasColumnType("tinyint");

                    b.Property<double?>("CurvePointValue")
                        .HasColumnType("float");

                    b.Property<double?>("Term")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CurvePoints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AsOfDate = new DateTime(2025, 1, 29, 15, 10, 9, 664, DateTimeKind.Utc).AddTicks(602),
                            CreationDate = new DateTime(2025, 2, 5, 15, 10, 9, 664, DateTimeKind.Utc).AddTicks(603),
                            CurveId = (byte)1,
                            CurvePointValue = 100.25,
                            Term = 10.5
                        },
                        new
                        {
                            Id = 2,
                            AsOfDate = new DateTime(2025, 1, 31, 15, 10, 9, 664, DateTimeKind.Utc).AddTicks(604),
                            CreationDate = new DateTime(2025, 2, 5, 15, 10, 9, 664, DateTimeKind.Utc).AddTicks(604),
                            CurveId = (byte)2,
                            CurvePointValue = 150.5,
                            Term = 15.75
                        });
                });

            modelBuilder.Entity("Dot.Net.WebApi.Domain.Trade", b =>
                {
                    b.Property<int>("TradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TradeId"), 1L, 1);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Benchmark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Book")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("BuyPrice")
                        .HasColumnType("float");

                    b.Property<double?>("BuyQuantity")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DealName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DealType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RevisionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevisionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("SellPrice")
                        .HasColumnType("float");

                    b.Property<double?>("SellQuantity")
                        .HasColumnType("float");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceListId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TradeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradeSecurity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trader")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TradeId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("Dot.Net.WebApi.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
